geeksforgeeks: https://www.geeksforgeeks.org/maximize-sum-of-k-elements-in-array-by-taking-only-corner-elements/



***************************************************

#include <iostream>
#include <vector>
using namespace std;

int solve(vector<int> &A, int B)
{
    int currSum = 0, maxSum = 0;
    for(int i=0;i<B;i++)
        currSum += A[i];
    
    maxSum = currSum;
    int j=A.size()-1;
    for(int i=B-1; i>=0;i--)
    {
        currSum = currSum+A[j]-A[i];
        maxSum = max(currSum, maxSum);
        j--;
    }
    return maxSum;
}

int main()
{
     vector<int> A= {5, -2, 3 , 1, 2};
    //vector<int> A= {-533, -666, -500, 169, 724, 478, 358, -38, -536, 705, -855, 281, -173, 961, 
    //-509, -5, 942, -173, 436, -609, -396, 902, -847, -708, -618, 421, -284, 718, 895, 
    //447, 726, -229, 538, 869, 912, 667, -701, 35, 894, -297, 811, 322, -667, 673,
    //-336, 141, 711, -747, -132, 547, 644, -338, -243, -963, -141, -277, 741, 529, -222, -684, 35 };
    //int B =48;
    int B=3;
    cout<<solve(A,B);
}


***************************************************

int Solution::solve(vector<int> &A, int B) {
    int n = A.size();
    vector<int> prefix(n);
    vector<int> suffix(n);

    prefix[0] = A[0];
    for(int i=1;i<n;i++)
        prefix[i] = prefix[i-1]+A[i];

    suffix[n-1] = A[n-1];
    for(int i=n-2;i>=0;i--)
        suffix[i] = suffix[i+1]+A[i];

    int maxSum = prefix[B-1], j=n-1;
    for(int i=B-1;i>=0;i--)
    {
        maxSum = max(prefix[i]-A[i]+suffix[j], maxSum);
        j--;
    }
    return maxSum;
}

***************************************************

int Solution::solve(vector<int> &A, int B) {
    int currSum = 0, maxSum = 0;
    for(int i=0;i<B;i++)
        currSum += A[i];
    maxSum = currSum;
    int j=A.size()-1;
    for(int i=B-1;i>=0;i--)
    {
        currSum += A[j]-A[i];
        maxSum = max(currSum, maxSum);
        j--;
    }
    return maxSum;
}

***************************************************
