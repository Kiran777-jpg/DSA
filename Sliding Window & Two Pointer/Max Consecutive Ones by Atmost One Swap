geeksforgeeks: https://www.geeksforgeeks.org/length-of-longest-consecutive-ones-by-at-most-one-swap-in-a-binary-string/


*****************************************************************************

Given a binary string A. It is allowed to do at most one swap between any 0 and 1. Find and return the length of the longest consecutive 1’s that can be achieved.


Input Format

The only argument given is string A.
Output Format

Return the length of the longest consecutive 1’s that can be achieved.
Constraints

1 <= length of string <= 1000000
A contains only characters 0 and 1.
For Example

Input 1:
    A = "111000"
Output 1:
    3

Input 2:
    A = "111011101"
Output 2:
    7

*****************************************************************************


int Solution::solve(string A) {
    int n=A.size(), totalOnes=0, ans=0;
    for(int i=0;i<n;i++)
        if(A[i]=='1') totalOnes++;
    if(totalOnes==0) return 0;
    if(totalOnes==n) return n;

    for(int i=0;i<n;i++)
    {
        if(A[i]=='0')
        {
            int left=0, right=0;
            for(int j=i-1;j>=0;j--)
            {
                if(A[j]=='1') left++;
                else break;
            }

            for(int j=i+1;j<n;j++)
            {
                if(A[j]=='1') right++;
                else break;
            }

            if(left+right<totalOnes)
                ans = max(ans, left+right+1);
            else ans=max(ans, left+right);
        }
    }
    return ans;
}


*****************************************************************************


#include <bits/stdc++.h>
using namespace std;
 
// Function to calculate the length of the
// longest consecutive 1's
int maximum_one(string s, int n)
{
    // To count all 1's in the string
    int cnt_one = 0;
 
    int max_cnt = 0, temp = 0;
 
    for (int i = 0; i < n; i++) {
        if (s[i] == '1') {
            cnt_one++;
            temp++;
        }
        else {
            max_cnt = max(temp, max_cnt);
            temp = 0;
        }
    }
 
    max_cnt = max(max_cnt, temp);
 
    // To store cumulative 1's
    int left[n], right[n];
 
    if (s[0] == '1')
        left[0] = 1;
    else
        left[0] = 0;
 
    if (s[n - 1] == '1')
        right[n - 1] = 1;
    else
        right[n - 1] = 0;
 
    // Counting cumulative 1's from left
    for (int i = 1; i < n; i++) {
        if (s[i] == '1')
            left[i] = left[i - 1] + 1;
 
        // If 0 then start new cumulative
        // one from that i
        else
            left[i] = 0;
    }
 
    for (int i = n - 2; i >= 0; i--) {
        if (s[i] == '1')
            right[i] = right[i + 1] + 1;
 
        else
            right[i] = 0;
    }
 
    for (int i = 1; i < n - 1; i++) {
        // perform step 3 of the approach
        if (s[i] == '0') {
 
            // step 3
            int sum = left[i - 1] + right[i + 1];
 
            if (sum < cnt_one)
                max_cnt = max(max_cnt, sum + 1);
 
            else
                max_cnt = max(max_cnt, sum);
        }
    }
 
    return max_cnt;
}
 
// Driver Code
int main()
{
    // string
    string s = "111011101";
 
    cout << maximum_one(s, s.length());
 
    return 0;
}

*****************************************************************************
