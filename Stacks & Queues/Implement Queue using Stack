leetcode: https://leetcode.com/problems/implement-queue-using-stacks/
geeksforgeeks: https://practice.geeksforgeeks.org/problems/queue-using-stack/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=queue-using-stack


**********************************************************************

amortized O(1) time complexity

class MyQueue {
public:
    stack<int> input, output;
    MyQueue() {
        
    }
    
    void push(int x) {
        input.push(x);
    }
    
    int pop() {
        if(output.empty())
        {
            while(!input.empty())
            {
                output.push(input.top());
                input.pop();
            }
        }
        int temp = output.top();
        output.pop();
        return temp;
    }
    
    int peek() {
        if(output.empty())
        {
            while(!input.empty())
            {
                output.push(input.top());
                input.pop();
            }
        }
        return output.top();
    }
    
    bool empty() {
        return (output.size()+input.size())==0;
    }
};

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue* obj = new MyQueue();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->peek();
 * bool param_4 = obj->empty();
 */
 
 ************************************************************
 
 class MyQueue {
public:
    stack<int> input, output;
    MyQueue() {
        
    }
    
    void push(int x) {
        while(!input.empty())
        {
            output.push(input.top());
            input.pop();
        }

        input.push(x);
        while(!output.empty())
        {
            input.push(output.top());
            output.pop();
        }
        
    }
    
    int pop() {
        int temp = input.top();
        input.pop();
        return temp;
    }
    
    int peek() {
        return input.top();
    }
    
    bool empty() {
        return input.size()==0;
    }
};

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue* obj = new MyQueue();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->peek();
 * bool param_4 = obj->empty();
 */
 
 *********************************************************************
 
 amortized O(1) time complexity
 
 
 #include <iostream>
#include <stack>
using namespace std;


class Queue
{
    stack<int> input, output;
    public:
        void push(int data)
        {
           input.push(data);
        }
        
        int pop()
        {
           if(output.empty())
           {
               while(!input.empty())
               {
                   output.push(input.top());
                   input.pop();
               }
           }
           int temp=output.top();
           output.pop();
           return temp;
        }
        
        int front()
        {
            if(output.empty())
            {
                while(!input.empty())
                {
                    output.push(input.top());
                    input.pop();
                }
            }
            return output.top();
        }
        
        int size()
        {
            return input.size()+output.size();
        }
        
};


int main()
{
    Queue q;
    q.push(1);
    q.push(2);
    q.push(3);
    q.push(4);
    q.push(5);
    cout<<q.front()<<endl;
    cout<<q.size()<<endl;
    cout<<q.pop()<<endl;
    cout<<q.size()<<endl;
    cout<<q.pop()<<endl;
}


**************************************************************************

#include <iostream>
#include <stack>
using namespace std;


class Queue
{
    stack<int> input, output;
    public:
        void push(int data)
        {
            while(!input.empty())
            {
                output.push(input.top());
                input.pop();
            }
            
            input.push(data);
            while(!output.empty())
            {
                input.push(output.top());
                output.pop();
            }
        }
        
        int pop()
        {
            int temp = input.top();
            input.pop();
            return temp;
        }
        
        int front()
        {
            return input.top();
        }
        
        int size()
        {
            return input.size();
        }
        
        void display()
        {
            stack<int> st=input;
            while(!st.empty())
            {
                cout<<st.top()<<" ";
                st.pop();
            }
            cout<<endl;
        }
};


int main()
{
    Queue q;
    q.push(1);
    q.push(2);
    q.push(3);
    q.push(4);
    q.push(5);
    q.display();
    cout<<q.front()<<endl;
    cout<<q.size()<<endl;
    cout<<q.pop()<<endl;
    cout<<q.size()<<endl;
    cout<<q.pop()<<endl;
    q.display();
}
