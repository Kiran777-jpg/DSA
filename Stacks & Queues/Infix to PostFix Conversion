geeksforgeeks: https://practice.geeksforgeeks.org/problems/infix-to-postfix-1587115620/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=infix-to-postfix


************************************************************

#include <iostream>
#include <stack>
using namespace std;

int prec(char c)
{
    if(c=='^') return 3;
    else if(c=='*' || c=='/') return 2;
    else if(c=='+' || c=='-') return 1;
    return -1;
}

int main()
{
    // string s = "a+b*(c^d-e)^(f+g*h)-i";
    string s = "(a-(b^c))+(d)";
    int n = s.length();
    stack<char> st;
    string ans="";
    
    for(int i=0;i<n;i++)
    {
        if((s[i]>='a'&&s[i]<='z')||(s[i]>='A'&&s[i]<='Z'))
            ans += s[i];   
        else
        {
            if(st.empty() || s[i]=='(' || (st.top()=='(' && prec(st.top())<prec(s[i])))
                st.push(s[i]);
            else
            {
                while(!st.empty() && prec(st.top())>=prec(s[i]))
                {
                    if(st.top()=='(') break;
                    ans += st.top();
                    st.pop();
                }
                if(s[i]==')' && st.top()=='(') st.pop();
                if(s[i]!=')') st.push(s[i]);   
            }
        }
    }
    while(!st.empty())
    {
        ans += st.top();
        st.pop();
    }
    cout<<ans<<endl;
}


************************************************************

#include <iostream>
#include <stack>
#include <unordered_map>
using namespace std;

int main()
{
    string s = "a+b*(c^d-e)^(f+g*h)-i";
    // string s = "(a-(b^c))+(d)";
    int n = s.length();
    stack<char> st;
    string ans="";
    unordered_map<char, int> hashmap;
    hashmap[')']=0; hashmap['(']=0; hashmap['+']=1; hashmap['-']=1; hashmap['*']=2; hashmap['/']=2; hashmap['^']=3;
    
    for(int i=0;i<n;i++)
    {
        if((s[i]>='a'&&s[i]<='z')||(s[i]>='A'&&s[i]<='Z'))
            ans += s[i];   
        else
        {
            if(st.empty() || s[i]=='(' || (st.top()=='(' && hashmap[st.top()]<hashmap[s[i]]))
                st.push(s[i]);
            else
            {
                while(!st.empty() && hashmap[st.top()]>=hashmap[s[i]])
                {
                    if(st.top()=='(') break;
                    ans += st.top();
                    st.pop();
                }
                if(s[i]==')' && st.top()=='(') st.pop();
                if(s[i]!=')') st.push(s[i]);   
            }
        }
    }
    while(!st.empty())
    {
        ans += st.top();
        st.pop();
    }
    cout<<ans<<endl;
}


**************************************************************************8

#include<bits/stdc++.h>

using namespace std;

//Function to return precedence of operators
int prec(char c) {
  if (c == '^')
    return 3;
  else if (c == '/' || c == '*')
    return 2;
  else if (c == '+' || c == '-')
    return 1;
  else
    return -1;
}

// The main function to convert infix expression
//to postfix expression
void infixToPostfix(string s) {

  stack < char > st; //For stack operations, we are using C++ built in stack
  string result;

  for (int i = 0; i < s.length(); i++) {
    char c = s[i];

    // If the scanned character is
    // an operand, add it to output string.
    if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9'))
      result += c;

    // If the scanned character is an
    // ‘(‘, push it to the stack.
    else if (c == '(')
      st.push('(');

    // If the scanned character is an ‘)’,
    // pop and to output string from the stack
    // until an ‘(‘ is encountered.
    else if (c == ')') {
      while (st.top() != '(') {
        result += st.top();
        st.pop();
      }
      st.pop();
    }

    //If an operator is scanned
    else {
      while (!st.empty() && prec(s[i]) <= prec(st.top())) {
        result += st.top();
        st.pop();
      }
      st.push(c);
    }
  }

  // Pop all the remaining elements from the stack
  while (!st.empty()) {
    result += st.top();
    st.pop();
  }

  cout << "Prefix expression: " << result << endl;
}

int main() {
  string exp = "(p+q)*(m-n)";
  cout << "Infix expression: " << exp << endl;
  infixToPostfix(exp);
  return 0;
}

*************************************************************

