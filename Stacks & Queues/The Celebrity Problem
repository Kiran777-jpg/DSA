geeksforgeeks: https://practice.geeksforgeeks.org/problems/the-celebrity-problem/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=the-celebrity-problem
leetcode: https://leetcode.com/problems/find-the-celebrity/



*****************************************************************
stack&queus using Elimination Technique

class Solution 
{
    public:
    //Function to find if there is a celebrity in the party or not.
    int celebrity(vector<vector<int> >& M, int n) 
    {
        // code here 
        stack<int> st;
        for(int i=0;i<n;i++)
            st.push(i);
        
        while(st.size()>1)
        {
            int top1 = st.top();
            st.pop();
            int top2 = st.top();
            st.pop();
            if(M[top1][top2]==1)
                st.push(top2);
            else st.push(top1);
        }
        
        int ans = st.top();
        for(int i=0;i<n;i++)
            if(M[ans][i]==1) return -1;
        for(int i=0;i<n;i++)
        {
            if(i==ans) continue;
            else if(M[i][ans]==0) return -1;
        }
        return ans;
    }
};

*****************************************************************
 Elimination Technique
 
 #define M arr
class Solution 
{
    public:
    //Function to find if there is a celebrity in the party or not.
    int celebrity(vector<vector<int> >& M, int n) 
    {
        // code here 
        int row=0;
        for(int i=1;i<n;i++)
        {
            if(arr[row][i]==1)
            {
                arr[row][row]=1;
                row=i;
            }
            else
                arr[i][i]=1;
        }
        
        for(int i=0;i<n;i++)
        {
            if(arr[i][i]==0)
            {
                int j=0, k=0;
                for(j=0;j<n;j++)
                    if(arr[i][j]==1) break;
                for(k=0;k<n;k++)
                    if(i!=k && arr[k][i]==0) break;
                
                if(j==n && k==n) return i;
            }
        }
        return -1;
    }
};

*****************************************************************
Two pointer Approac

#define M arr
class Solution 
{
    public:
    //Function to find if there is a celebrity in the party or not.
    int celebrity(vector<vector<int> >& M, int n) 
    {
        // code here 
        int i=0, j=n-1;
        while(i<j)
        {
            if(arr[i][j]==1) i++;
            else j--;
        }
        
        for(int j=0;j<n;j++)
            if(arr[i][j]==1) return -1;
        for(int j=0;j<n;j++)
            if(i!=j && arr[j][i]==0) return -1;
        return i;
    }
};


*****************************************************************
using Graphs: indegree, outdegree

#include <bits/stdc++.h>
#include <list>
using namespace std;
 
// Max # of persons in the party
#define N 4
 
bool MATRIX[N][N] = { { 0, 0, 1, 0 },
                      { 0, 0, 1, 0 },
                      { 0, 0, 0, 0 },
                      { 0, 0, 1, 0 } };
 
bool knows(int a, int b) { return MATRIX[a][b]; }
 
int findCelebrity(int n)
{
    int indegree[n] = { 0 }, outdegree[n] = { 0 };
    
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            int x = knows(i, j);
            outdegree[i] += x;
            indegree[j] += x;
        }
    }
    
    for (int i = 0; i < n; i++)
        if (indegree[i] == n - 1 && outdegree[i] == 0)
            return i;
 
    return -1;
}
 
int main()
{
    int n = 4;
    int id = findCelebrity(n);
    id == -1 ? cout << "No celebrity"
             : cout << "Celebrity ID " << id;
    return 0;
}

*****************************************************************
Recursion - Not understand

#include <bits/stdc++.h>
#include <list>
using namespace std;
 
#define N 4
 
bool MATRIX[N][N] = { { 0, 0, 1, 0 },
                      { 0, 0, 1, 0 },
                      { 0, 0, 0, 0 },
                      { 0, 0, 1, 0 } };
 
bool knows(int a, int b) { return MATRIX[a][b]; }
 
int findPotentialCelebrity(int n)
{
    if (n == 0)
        return -1;
 
    int id = findPotentialCelebrity(n - 1);
 
    if (id == -1)
        return n - 1;
    else if (knows(id, n - 1)) {
        return n - 1;
    }
    else if (knows(n - 1, id)) {
        return id;
    }
 
    return -1;
}

int Celebrity(int n)
{
    int id = findPotentialCelebrity(n);
    
    if (id == -1)
        return id;
    else {
        int c1 = 0, c2 = 0;
 
        for (int i = 0; i < n; i++)
            if (i != id) {
                c1 += knows(id, i);
                c2 += knows(i, id);
            }
 
        if (c1 == 0 && c2 == n - 1)
            return id;
 
        return -1;
    }
}

int main()
{
    int n = 4;
    int id = Celebrity(n);
    id == -1 ? cout << "No celebrity"
             : cout << "Celebrity ID " << id;
    return 0;
}

*****************************************************************
Brute force: 

class Solution 
{
    public:
    //Function to find if there is a celebrity in the party or not.
    bool isCelebrity(vector<vector<int> >& M, int n, int i)
    {
        for(int j=0;j<n;j++)
        {
            if(M[i][j]==1) return false;
        }
        
        for(int j=0;j<n;j++)
        {
            if(i==j) continue;
            if(M[j][i]==0) return false;
        }
        return true;
    }
    
    int celebrity(vector<vector<int> >& M, int n) 
    {
        // code here 
        for(int i=0;i<n;i++)
        {
            if(isCelebrity(M, n, i))
                return i;
        }
        return -1;
    }
};


*****************************************************************
