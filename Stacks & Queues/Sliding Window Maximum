leetcode: https://leetcode.com/problems/sliding-window-maximum/description/
geeksforgeeks: https://practice.geeksforgeeks.org/problems/maximum-of-all-subarrays-of-size-k3101/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=maximum-of-all-subarrays-of-size-k


***********************************************************************
Deque : Tc: o(n), sc:o(k)

class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        deque<int> dq;
        vector<int> ans;

        for(int i=0;i<nums.size();i++)
        {
            if(!dq.empty() && dq.front()==i-k) dq.pop_front();

            while(!dq.empty() && nums[dq.back()]<=nums[i])
                dq.pop_back();
            
            dq.push_back(i);
            if(i>=k-1) ans.push_back(nums[dq.front()]);
        }
        return ans;
    }
};

***********************************************************************

priority_queue : Tc:o(nlong), Sc:o(n)

class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> ans;

        priority_queue<pair<int, int>> pq;

        for(int i=0;i<k;i++)
            pq.push({nums[i], i});

        ans.push_back(pq.top().first);

        for(int i=k;i<n;i++)
        {
            pq.push({nums[i], i});

            while(!pq.empty() && pq.top().second<=i-k)
                pq.pop();
            ans.push_back(pq.top().first);
        }
        return ans;
    }
};


***********************************************************************

#include<bits/stdc++.h>

using namespace std;

void GetMax(vector < int > nums, int l, int r, vector < int > & arr) {
  int i, maxi = INT_MIN;
  for (i = l; i <= r; i++)
    maxi = max(maxi, nums[i]);
  arr.push_back(maxi);
}
vector < int > maxSlidingWindow(vector < int > & nums, int k) {
  int left = 0, right = 0;
  int i, j;
  vector < int > arr;
  while (right < k - 1) {
    right++;
  }
  while (right < nums.size()) {
    GetMax(nums, left, right, arr);
    left++;
    right++;
  }
  return arr;
}
int main() {
  int i, j, n, k = 3, x;
  vector < int > arr {
4,0,
-1,
3,
5,
3,
6,
8};
  vector < int > ans;
  ans = maxSlidingWindow(arr, k);
  cout << "Maximum element in every " << k << " window " << endl;
  for (i = 0; i < ans.size(); i++)
    cout << ans[i] << "  ";
  return 0;
}

***********************************************************************

class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> ans;
        for(int i=0;i<=n-k;i++)
            ans.push_back(*max_element(nums.begin()+i, nums.begin()+i+k));
        return ans;
    }
};

***********************************************************************
