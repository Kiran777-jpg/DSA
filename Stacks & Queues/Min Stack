leetcode: https://leetcode.com/problems/min-stack/description/
geeksforgeeks: https://practice.geeksforgeeks.org/problems/get-minimum-element-from-stack/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=get-minimum-element-from-stack


**********************************************************************************

class MinStack {
public:
    stack<long long> st;
    long long mini;
    MinStack() {
        mini=INT_MAX;
    }
    
    void push(int val) {
        long long value = val;
        if(st.empty()) 
        {
            st.push(value);
            mini = value;
        }
        else if(value < mini)
        {
            st.push(2*value-mini);
            mini = value;
        }
        else
            st.push(value);
    }
    
    void pop() {
        if(st.empty()) return;
        if(st.top()<mini)
            mini = 2*mini-st.top();
        st.pop();
    }
    
    int top() {
        if(st.empty()) return -1;
        if(st.top()<mini)
            return mini;
        else return st.top();
    }
    
    int getMin() {
        return mini;
    }
};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack* obj = new MinStack();
 * obj->push(val);
 * obj->pop();
 * int param_3 = obj->top();
 * int param_4 = obj->getMin();
 */


**********************************************************************************


class MinStack {
public:
    stack<pair<int, int>> st;
    MinStack() {
        
    }
    
    void push(int val) {
        if(st.empty()) st.push({val, val});
        else st.push({val, min(st.top().second, val)});
    }
    
    void pop() {
        st.pop();
    }
    
    int top() {
        return st.top().first;
    }
    
    int getMin() {
        return st.top().second;
    }
};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack* obj = new MinStack();
 * obj->push(val);
 * obj->pop();
 * int param_3 = obj->top();
 * int param_4 = obj->getMin();
 */


**********************************************************************************

class MinStack {
public:
    multiset<int> hashset;
    stack<int> st;
    MinStack() {
        
    }
    
    void push(int val) {
        st.push(val);
        hashset.insert(val);
    }
    
    void pop() {
        hashset.erase(hashset.find(st.top()));
        st.pop();
    }
    
    int top() {
        if(st.empty()) return -1;
        return st.top();
    }
    
    int getMin() {
        if(hashset.size()) return *hashset.begin();
        else return -1;
    }
};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack* obj = new MinStack();
 * obj->push(val);
 * obj->pop();
 * int param_3 = obj->top();
 * int param_4 = obj->getMin();
 */

**********************************************************************************

class MinStack {
public:
    stack<int> st1, st2;
    MinStack() {
        
    }
    
    void push(int val) {
        if(st1.empty()) st1.push(val), st2.push(val);
        else
        {
            if(val <= st2.top()) st2.push(val);
            st1.push(val);
        }
    }
    
    void pop() {
        if(st1.top()==st2.top()) st2.pop();
        st1.pop();
    }
    
    int top() {
        return st1.top();
    }
    
    int getMin() {
        return st2.top();
    }
};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack* obj = new MinStack();
 * obj->push(val);
 * obj->pop();
 * int param_3 = obj->top();
 * int param_4 = obj->getMin();
 */

**********************************************************************************
