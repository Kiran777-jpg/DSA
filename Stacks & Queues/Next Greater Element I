leetcode: https://leetcode.com/problems/next-greater-element-i/description/


***************************************************

class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        if(nums1.size()==0 || nums2.size()==0) return {};
        int n = nums1.size(), m = nums2.size();
        unordered_map<int, int> hashmap;
        stack<int> st;
        for(int i=m-1;i>=0;i--)
        {
            while(!st.empty() && st.top()<=nums2[i])
                st.pop();
            if(st.empty()) hashmap[nums2[i]] = -1;
            else hashmap[nums2[i]] = st.top();
            st.push(nums2[i]);
        }
        for(int i=0;i<n;i++)
            nums1[i] = hashmap[nums1[i]];
        
        return nums1;
    }
};

***************************************************

class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        if(nums1.size()==0 || nums2.size()==0) return {};
        int n = nums1.size(), m = nums2.size();
        unordered_map<int, int> hashmap;
        stack<int> st;
        st.push(-1);
        for(int i=m-1;i>=0;i--)
        {
            while(!st.empty() && st.top()!=-1 && st.top()<=nums2[i])
                st.pop();
            // if(st.empty()) hashmap[nums2[i]] = -1;
            hashmap[nums2[i]] = st.top();
            st.push(nums2[i]);
        }
        for(int i=0;i<n;i++)
            nums1[i] = hashmap[nums1[i]];
        
        return nums1;
    }
};

***************************************************
