leetcode: https://leetcode.com/problems/lru-cache/description/
geeksforgeeks: https://practice.geeksforgeeks.org/problems/lru-cache/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=lru-cache


*****************************************************************

class Node
{
    public:
        int key;
        int data;
        Node* next;
        Node* prev;

        Node(int key, int data)
        {
            this->key = key;
            this->data = data;
            next = NULL;
            prev = NULL;
        }
};

class LRUCache {
public:
    Node* head = new Node(-1, -1);
    Node* tail = new Node(-1, -1);
    unordered_map<int, Node*> hashmap;
    int capacity;

    LRUCache(int capacity) {
        head->next = tail;
        tail->prev = head;
        this->capacity = capacity;
    }
    
    void addNode(Node* newnode)
    {
        newnode->next = head->next;
        head->next->prev = newnode;
        head->next = newnode;
        newnode->prev = head;
    }

    void deleteNode(Node* delNode)
    {
        delNode->prev->next = delNode->next;
        delNode->next->prev = delNode->prev;
    }

    int get(int key) {
        if(hashmap.count(key))
        {
            Node* resNode = hashmap[key];
            deleteNode(resNode);
            addNode(resNode);
            return resNode->data;
        }
        return -1;
    }
    
    void put(int key, int value) {
        if(hashmap.find(key)!=hashmap.end())
        {
            deleteNode(hashmap[key]);
        }
        else if(hashmap.size() == capacity)
        {
            hashmap.erase(tail->prev->key);
            deleteNode(tail->prev);
        }

        addNode(new Node(key, value));
        hashmap[key] = head->next;
    }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */

*****************************************************************
using STL

class LRUCache
{
    public:
        list<pair<int,int>> l;
        unordered_map<int,list<pair<int, int>>::iterator> m;
        int size;
        LRUCache(int capacity)
        {
            size=capacity;
        }
        int get(int key)
        {
            if(m.find(key)==m.end())
                return -1;
            l.splice(l.begin(),l,m[key]);
            return m[key]->second;
        }
        void put(int key, int value)
        {
            if(m.find(key)!=m.end())
            {
                l.splice(l.begin(),l,m[key]);
                m[key]->second=value;
                return;
            }
            if(l.size()==size)
            {
                auto d_key=l.back().first;
                l.pop_back();
                m.erase(d_key);
            }
            l.push_front({key,value});
            m[key]=l.begin();
        }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */

*****************************************************************
