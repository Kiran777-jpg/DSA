

Problem Description
Given a collection of intervals, merge all overlapping intervals.



Problem Constraints
1 <= Total number of intervals <= 100000.



Input Format
First argument is a list of intervals.



Output Format
Return the sorted list of intervals after merging all the overlapping intervals.



Example Input
Input 1:

[1,3],[2,6],[8,10],[15,18]


Example Output
Output 1:

[1,6],[8,10],[15,18]


Example Explanation
Explanation 1:

Merge intervals [1,3] and [2,6] -> [1,6].
so, the required answer after merging is [1,6],[8,10],[15,18].
No more overlapping intervals present.




***************************************************************************************************************************************************


/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
bool compare(Interval a, Interval b)
{
    return a.start<b.start;
}

vector<Interval> Solution::merge(vector<Interval> &A) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details
    vector<Interval> ans;
    sort(A.begin(), A.end(), compare);
    Interval temp=A[0];
    for(Interval it : A)
    {
        if(it.start<=temp.end)
            temp.end=max(temp.end, it.end);
        else
            ans.push_back(temp), temp=it;
    }
    ans.push_back(temp);
    return ans;
}



***************************************************************************************************************************************************


#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

struct Interval
{
    int start, end;
    Interval(int start, int end)
    {
        this->start=start;
        this->end=end;
    }
};

bool compare(Interval a, Interval b)
{
    return a.start<b.start;
}

vector<Interval> merge(vector<Interval> &intervals)
{
    int n=intervals.size();
    vector<Interval> ans;
    sort(intervals.begin(), intervals.end(), compare);
    Interval temp = intervals[0];
    for(int i=1;i<n;i++)
    {
        if(intervals[i].start<=temp.end)
            temp.end=max(temp.end, intervals[i].end);
        else
            ans.push_back(temp), temp=intervals[i];
    }
    ans.push_back(temp);
    return ans;
}

int main()
{
    // vector<Interval> intervals={{1,3},{2,6},{8,10},{15,18}};
    vector<Interval> intervals={{1,6},{8,10},{15,18}};
    vector<Interval> ans = merge(intervals);
    for(Interval x : ans)
        cout<<x.start<<", "<<x.end<<endl;
}

***************************************************************************************************************************************************



***************************************************************************************************************************************************



***************************************************************************************************************************************************


***************************************************************************************************************************************************
