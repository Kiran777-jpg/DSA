leetcode: https://leetcode.com/problems/next-permutation/
geeksforgeeks: https://www.geeksforgeeks.org/next-permutation/




****************************************************************************

vector<int> Solution::nextPermutation(vector<int> &A) {
    int n=A.size(), i=n-2, j=n-1;
    for(;i>=0;i--)
        if(A[i]<A[i+1]) break;
    if(i<0) 
    {
        reverse(A.begin(), A.end());
        return A;
    }
    for(;j>i;j--)
        if(A[j]>A[i]) break;
    swap(A[i], A[j]);
    reverse(A.begin()+i+1, A.end());
    return A;
}


****************************************************************************

#include<iostream>
#include<vector>
#include<algorithm>

using namespace std;

int main() {
    int arr[] = {1,3,2};
    
    next_permutation(arr,arr+3);//using in-built function of C++
    
    cout<<arr[0]<<" "<<arr[1]<<" "<<arr[2];
    
    return 0;
}

****************************************************************************


Brute Force: Finding all possible permutations. 

Approach :

Step 1: Find all possible permutations of elements present and store them.

Step 2: Search input from all possible permutations.

Step 3: Print the next permutation present right after it.

For reference of how to find all possible permutations, follow up https://www.youtube.com/watch?v=f2ic2Rsc9pU&t=32s. This video shows for distinct elements but code works for duplicates too.


****************************************************************************
