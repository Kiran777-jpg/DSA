Problem Description
Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.



Problem Constraints
0 <= |intervals| <= 105



Input Format
First argument is the vector of intervals

second argument is the new interval to be merged



Output Format
Return the vector of intervals after merging



Example Input
Input 1:

Given intervals [1, 3], [6, 9] insert and merge [2, 5] .
Input 2:

Given intervals [1, 3], [6, 9] insert and merge [2, 6] .


Example Output
Output 1:

 [ [1, 5], [6, 9] ]
Output 2:

 [ [1, 9] ]


Example Explanation
Explanation 1:

(2,5) does not completely merge the given intervals
Explanation 2:

(2,6) completely merges the given intervals






******************************************************************************************************************************


/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
vector<Interval> Solution::insert(vector<Interval> &intervals, Interval newInterval) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details
    int n=intervals.size();
    vector<Interval> ans;
    for(int i=0;i<n;i++)
    {
        if(intervals[i].end<newInterval.start)
            ans.push_back(intervals[i]);
        else if(newInterval.end<intervals[i].start)
        {
            ans.push_back(newInterval);
            for(int j=i;j<n;j++)
                ans.push_back(intervals[j]);
            return ans;
        }
        else
        {
            newInterval.start=min(newInterval.start, intervals[i].start);
            newInterval.end=max(newInterval.end, intervals[i].end);
        }
    }
    ans.push_back(newInterval);
    return ans;
}




******************************************************************************************************************************


#include <iostream>
#include <vector>
using namespace std;

struct Interval
{
    int start, end;
    Interval(int start, int end)
    {
        this->start=start;
        this->end=end;
    }
};

vector<Interval> insert(vector<Interval> &intervals, Interval &newInterval)
{
    int n=intervals.size();
    vector<Interval> ans;
    for(int i=0;i<n;i++)
    {
        if(intervals[i].end<newInterval.start)
            ans.push_back(intervals[i]);// ans.push_back(Interval(intervals[i].start, intervals[i].end));
        else if(newInterval.end<intervals[i].start)
        {
            ans.push_back(newInterval);
            for(int j=i;j<n;j++)
                ans.push_back(intervals[j]);
            return ans;
        }
        else
        {
            newInterval.start=min(newInterval.start, intervals[i].start);
            newInterval.end=max(newInterval.end, intervals[i].end);
        }
    }
    ans.push_back(newInterval);
    return ans;
}

int main()
{
    vector<Interval> intervals={{1,3},{6,9}};
    Interval newInterval = {2,5};
    // vector<Interval> intervals={{1,3},{6,9}};
    // Interval newInterval = {2,6};
    vector<Interval> ans = insert(intervals, newInterval);
    for(Interval x : ans)
        cout<<x.start<<", "<<x.end<<endl;
}



******************************************************************************************************************************


#include <iostream>
#include <vector>
using namespace std;

struct Interval
{
    int start, end;
    Interval(int start, int end)
    {
        this->start=start;
        this->end=end;
    }
};

vector<Interval> insert(vector<Interval> &intervals, Interval &newInterval)
{
    int n=intervals.size();
    vector<Interval> ans;
    for(int i=0;i<n;i++)
    {
        if(intervals[i].end<newInterval.start)
            ans.push_back(Interval(intervals[i].start, intervals[i].end));
        else if(newInterval.end<intervals[i].start)
        {
            ans.push_back(Interval(newInterval.start, newInterval.end));
            for(int j=i;j<n;j++)
                ans.push_back(Interval(intervals[j].start, intervals[j].end));
            return ans;
        }
        else
        {
            newInterval.start=min(newInterval.start, intervals[i].start);
            newInterval.end=max(newInterval.end, intervals[i].end);
        }
    }
    ans.push_back(Interval(newInterval.start, newInterval.end));
    return ans;
}

int main()
{
    // vector<Interval> intervals={{1,3},{6,9}};
    // Interval newInterval = {2,5};
    // vector<Interval> intervals={{1,3},{6,9}};
    // Interval newInterval = {2,6};
    vector<Interval> intervals={{1,2},{8,10}};
    Interval newInterval = {3,6};
    vector<Interval> ans = insert(intervals, newInterval);
    for(Interval x : ans)
        cout<<x.start<<", "<<x.end<<endl;
}

******************************************************************************************************************************


#include <iostream>
#include <vector>
using namespace std;

struct Interval
{
    int start, end;
    Interval(int start, int end)
    {
        this->start=start;
        this->end=end;
    }
};

vector<Interval*> insert(vector<Interval> &intervals, Interval &newInterval)
{
    int n=intervals.size();
    vector<Interval*> ans;
    for(int i=0;i<n;i++)
    {
        if(intervals[i].end<newInterval.start)
            ans.push_back(new Interval(intervals[i].start, intervals[i].end));
        else if(newInterval.end<intervals[i].start)
        {
            ans.push_back(new Interval(newInterval.start, newInterval.end));
            for(int j=i;j<n;j++)
                ans.push_back(new Interval(intervals[j].start, intervals[j].end));
            return ans;
        }
        else
        {
            newInterval.start=min(newInterval.start, intervals[i].start);
            newInterval.end=max(newInterval.end, intervals[i].end);
        }
    }
    ans.push_back(new Interval(newInterval.start, newInterval.end));
    return ans;
}

int main()
{
    vector<Interval> intervals={{1,3},{6,9}};
    Interval newInterval = {2,5};
    // vector<Interval> intervals={{1,3},{6,9}};
    // Interval newInterval = {2,6};
    vector<Interval*> ans = insert(intervals, newInterval);
    for(Interval* x : ans)
        cout<<x->start<<", "<<x->end<<endl;
}

******************************************************************************************************************************

******************************************************************************************************************************
