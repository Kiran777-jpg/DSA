


*************************************************************************************************************************

int Solution::trap(const vector<int> &A) {
    int n=A.size();
    int l=0, r=n-1;
    int leftMax=0, rightMax=0, ans=0;

    while(l<=r)
    {
        if(A[l]<=A[r])
        {
            if(A[l]>=leftMax)
                leftMax=A[l];
            else
                ans+=leftMax-A[l];
            l++;
        }
        else
        {
            if(A[r]>=rightMax)
                rightMax=A[r];
            else    
                ans+=rightMax-A[r];
            r--;
        }
    }
    return ans;
}



*************************************************************************************************************************

int Solution::trap(const vector<int> &A) {
    int n=A.size(), ans=0;
    stack<int> st;
    for(int i=0;i<n;i++)
    {
        while(!st.empty() && A[i]>A[st.top()])
        {
            int popped=st.top();
            st.pop();
            if(st.empty()) break;
            int width=i-st.top()-1;
            int height=min(A[i], A[st.top()])-A[popped];
            ans += height*width;
        }
        st.push(i);
    }
    return ans;
}


*************************************************************************************************************************


int Solution::trap(const vector<int> &A) {
    int n=A.size(), ans=0;
    vector<int> leftmax(n, 0);
    vector<int> rightmax(n ,0);
    leftmax[0]=A[0];
    for(int i=1;i<n;i++)
        leftmax[i]=max(leftmax[i-1], A[i]);
    rightmax[n-1]=A[n-1];
    for(int i=n-2;i>=0;i--)
        rightmax[i]=max(rightmax[i+1], A[i]);
    
    for(int i=0;i<n;i++)
        ans+=min(leftmax[i], rightmax[i])-A[i];
    return ans;
}



*************************************************************************************************************************

*************************************************************************************************************************
