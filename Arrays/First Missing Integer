


Problem Description
Given an unsorted integer array, A of size N. Find the first missing positive integer.

Note: Your algorithm should run in O(n) time and use constant space.



Problem Constraints
1 <= N <= 1000000

-109 <= A[i] <= 109



Input Format
First argument is an integer array A.



Output Format
Return an integer denoting the first missing positive integer.



Example Input
Input 1:

[1, 2, 0]
Input 2:

[3, 4, -1, 1]
Input 3:

[-8, -7, -6]


Example Output
Output 1:

3
Output 2:

2
Output 3:

1


Example Explanation
Explanation 1:

A = [1, 2, 0]
First positive integer missing from the array is 3.



****************************************************************************************************************************************


int Solution::firstMissingPositive(vector<int> &A) {
    int n=A.size();
    for(int i=0;i<n;i++)
    {
        while(A[i]>0 && A[i]<n && A[i]!=i+1)
        {
            if(A[i]==A[A[i]-1]) break;
            swap(A[i], A[A[i]-1]);
        }
    }
    int i=0;
    for(;i<n;i++)
    {
        if(A[i]!=i+1)
            return i+1;
    }
    return i+1;
}


****************************************************************************************************************************************


#include <iostream>
#include <vector>
using namespace std;

int missingNumber(vector<int> &A)
{   
    int n=A.size();
    for(int i=0;i<n;i++)
    {
        while(A[i]>0 && A[i]<n && A[i]!=i+1)
        {
            if(A[i]==A[A[i]-1]) break;
            swap(A[i], A[A[i]-1]);   
        }
    }
    
    int i=0;
    for(i=0;i<n;i++)
    {
        if(A[i]!=i+1)
            return i+1;
    }
    
    return i+1;
}

int main()
{
    // vector<int> A={5,3,-7,-3,1,8,2};
    vector<int> A={1,2,0};
    // vector<int> A={3,4,-1,1};
    // vector<int> A={-8,-7,-6};
    // vector<int> A={5,3,2,4,4,4,1,6,8,7,-9,8,10};
    cout<<missingNumber(A);
}


****************************************************************************************************************************************

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int missingNumber(vector<int> &A)
{   
    int n=A.size();
    sort(A.begin(), A.end());
    int val=1;
    for(int i=0;i<n;i++)
    {
        if(A[i]<=0) continue;
        else
        {
            if(A[i]==val) val++;
            else if(A[i]==val-1) continue;
            else return val;
        }
    }
    return val;
}

int main()
{
    // vector<int> A={5,3,-7,-3,1,8,2};
    // vector<int> A={1,2,0};
    // vector<int> A={3,4,-1,1};
    // vector<int> A={-8,-7,-6};
    vector<int> A={5,3,2,4,4,4,1,6,8,7,-9,8,10};
    cout<<missingNumber(A);
}


****************************************************************************************************************************************

#include <iostream>
#include <vector>
#include <unordered_set>
using namespace std;

int missingNumber(vector<int> &A)
{   
    int n=A.size();
    unordered_set<int> hashset;
    for(int x : A)
        hashset.insert(x);
    for(int i=1;i<n+1;i++)
    {
        if(hashset.find(i)==hashset.end())
            return i;
    }
    return n+1;
}

int main()
{
    // vector<int> A={5,3,-7,-3,1,8,2};
    vector<int> A={1,2,0};
    // vector<int> A={3,4,-1,1};
    // vector<int> A={-8,-7,-6};
    // vector<int> A={5,3,2,4,4,4,1,6,8,7,-9,8,10};
    cout<<missingNumber(A);
}


****************************************************************************************************************************************



****************************************************************************************************************************************
