leetcode: https://leetcode.com/problems/continuous-subarray-sum/description/


************************************************
class Solution {
public:
    bool checkSubarraySum(vector<int>& nums, int k) {
        unordered_map<int, int> remaindersToIndex;
        remaindersToIndex[0]=-1;
        int prefixSum=0;
        for(int i=0;i<nums.size();i++)
        {
            prefixSum += nums[i];
            int rem = prefixSum % k;
            if(remaindersToIndex.count(rem))
            {
                if(i-remaindersToIndex[rem]>1) return true;
            }
            else
                remaindersToIndex[rem]=i;
        }
        return false;
    }
};

******************************************************8

class Solution {
public:
    bool checkSubarraySum(vector<int>& nums, int k) {
        unordered_map<int, int> remaindersToIndex;
        // remaindersToIndex[0]=-1;
        int prefixSum=0;
        for(int i=0;i<nums.size();i++)
        {
            prefixSum += nums[i];
            int rem = prefixSum % k;
            if(rem==0 && i) return true;
            if(remaindersToIndex.count(rem))
            {
                if(i-remaindersToIndex[rem]>1) return true;
            }
            else
                remaindersToIndex[rem]=i;
        }
        return false;
    }
};
