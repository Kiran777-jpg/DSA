geeksforgeeks: https://practice.geeksforgeeks.org/problems/perfect-sum-problem5633/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=perfect-sum-problem



*********************************************************
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int subsets(vector<int> &arr, int i, int target, int sum)
{
    //for reduce the time complexity we can have one base case 
    // it is strictly for having postive numbers in arr
    if(sum > target) return 0;
    if(i==arr.size())
    {
        if(sum==target)
            return 1;
        return 0;
    }
    int l = subsets(arr, i+1, target, sum+arr[i]);
    int r =  subsets(arr, i+1, target, sum);
    return l+r;
}

int main()
{
    vector<int> arr = {1,2,3};
    cout<<subsets(arr, 0, 3, 0);
    // sort(ans.begin(), ans.end());
}
**********************************************************************
	public:
	int mod=1e9+7;
	int perfectSumUtil(int arr[], int n, int sum, int s, int i)
	{
	    if(s > sum) return 0;
	    if(i==n)
	    {
	        if(s==sum)
	            return 1;
	        return 0;
	    }
	    
	    int l = perfectSumUtil(arr, n, sum, (s+arr[i])%mod, i+1);
	    int r = perfectSumUtil(arr, n, sum%mod, s, i+1);
	    return l+r;
	}
	
	int perfectSum(int arr[], int n, int sum)
	{
        // Your code goes here
        return perfectSumUtil(arr, n, sum, 0, 0);
	}
	  
};
