leetcode: https://leetcode.com/problems/combination-sum-ii/description/



*********************************************************************************************************

class Solution {
public:
    void combinationSum2Util(vector<int> &arr, int target, int start, vector<int> v, vector<vector<int>> &ans)
    {
        if(target < 0) return;
        if(target == 0)
        {
            ans.push_back(v);
            return;
        }
        // unordered_set<int> hashset;
        for(int i=start;i<arr.size();i++)
        {
            if(i>start && arr[i]==arr[i-1]) continue;
            // if(hashset.find(arr[i])!=hashset.end()) continue;
            // hashset.insert(arr[i]);
            v.push_back(arr[i]);
            combinationSum2Util(arr, target-arr[i], i+1, v, ans);
            v.pop_back();
        }
    }
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<vector<int>> ans;
        vector<int> v;
        sort(candidates.begin(), candidates.end());
        combinationSum2Util(candidates, target, 0, v, ans);
        return ans;
    }
};


****************************************************************************************************************

class Solution {
public:
    void combinationSum2Util(vector<int> &arr, int target, int start, vector<int> v, vector<vector<int>> &ans)
    {
        if(target < 0) return;
        if(target == 0)
        {
            ans.push_back(v);
            return;
        }
        unordered_set<int> hashset;
        for(int i=start;i<arr.size();i++)
        {
            // if(i>start && arr[i]==arr[i-1]) continue;
            if(hashset.find(arr[i])!=hashset.end()) continue;
            hashset.insert(arr[i]);
            v.push_back(arr[i]);
            combinationSum2Util(arr, target-arr[i], i+1, v, ans);
            v.pop_back();
        }
    }
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<vector<int>> ans;
        vector<int> v;
        sort(candidates.begin(), candidates.end());
        combinationSum2Util(candidates, target, 0, v, ans);
        return ans;
    }
};


****************************************************************************************************************

correct Solution But TIME LIMIT EXCEEDED - (Hint - we need to stop that unwanted calls means the duplicate calls)

class Solution {
public:
    void combinationSum2Util(vector<int> &arr, int target, int i, int sum, vector<int> v, set<vector<int>> &hashset)
    {
        if(i==arr.size())
        {
            if(target == sum)
            {
                // auto it = find(hashset.begin(), hashset.end(), v);
                // if(it == hashset.end()) hashset.insert(v);
                hashset.insert(v);
            }
            return;
        }

        v.push_back(arr[i]);
        combinationSum2Util(arr, target, i+1, sum+arr[i], v, hashset);
        v.pop_back();
        combinationSum2Util(arr, target, i+1, sum, v, hashset);
    }
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<int> v;
        set<vector<int>> hashset;
        sort(candidates.begin(), candidates.end());
        combinationSum2Util(candidates, target, 0, 0, v, hashset);
        vector<vector<int>> ans(hashset.begin(), hashset.end());
        return ans;
    }
};
