geeksforgeeks: https://practice.geeksforgeeks.org/problems/m-coloring-problem-1587115620/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=m-coloring-problem


************************************************************
public:
    // Function to determine if graph can be coloured with at most M colours such
    // that no two adjacent vertices of graph are coloured with same colour.
    bool isValid(bool graph[101][101], vector<int> &nodeColors, int n, int node, int color)
    {
        for(int i=0;i<n;i++)
        {
            if(i!=node && graph[node][i]==1 && nodeColors[i]==color) return false;
        }
        return true;
    }
    bool graphColoringUtil(bool graph[101][101], vector<int> &nodeColors, int m, int n, int node)
    {
        if(node==n) return true;
        for(int i=1;i<=m;i++)
        {
            if(isValid(graph, nodeColors, n, node, i))
            {
                nodeColors[node] = i;
                if(graphColoringUtil(graph, nodeColors, m, n, node+1)) return  true;
                nodeColors[node] = 0;
            }
        }
        return false;
    }
    bool graphColoring(bool graph[101][101], int m, int n) {
        // your code here
        vector<int> nodeColors(n, 0);
        return graphColoringUtil(graph, nodeColors, m, n, 0);
    }
};
