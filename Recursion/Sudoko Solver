leetcode: https://leetcode.com/problems/sudoku-solver/
geeksforgeeks: https://practice.geeksforgeeks.org/problems/solve-the-sudoku-1587115621/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=solve-the-sudoku


*********************************************************************
class Solution {
public:
    bool isValid(vector<vector<char>>& board, int row, int col, char num)
    {
        //row and col check 
        for(int i=0;i<9;i++)
        {
            if(board[row][i]==num || board[i][col]==num) return false;
        }

        //submatrix check
        row = (row/3)*3;
        col = (col/3)*3;
        for(int i=row;i<(row+3);i++)
        {
            for(int j=col;j<(col+3);j++)
            {
                if(board[i][j]==num) return false;
            }
        }
        return true;
    }
    bool solveSudokuUtil(vector<vector<char>>& board, int n, int row, int col)
    {
        if(row==n)
            return true;
        if(col==n)
            return solveSudokuUtil(board, n, row+1, 0);
        if(board[row][col]!='.')
            return solveSudokuUtil(board, n, row, col+1);
        
        for(char i='1';i<='9';i++)
        {
            if(isValid(board, row, col, i))
            {
                board[row][col]=i;
                if(solveSudokuUtil(board, n, row, col+1))
                    return true;
            }
        }
        board[row][col]='.';
        return false;
    }
    void solveSudoku(vector<vector<char>>& board) {
        int n=9;
        solveSudokuUtil(board, n, 0, 0);
    }
};

*********************************************************************

#include <iostream>

#include <vector>

using namespace std;

bool isValid(vector < vector < char >> & board, int row, int col, char c) {
  for (int i = 0; i < 9; i++) {
    if (board[i][col] == c)
      return false;

    if (board[row][i] == c)
      return false;

    if (board[3 * (row / 3) + i / 3][3 * (col / 3) + i % 3] == c)
      return false;
  }
  return true;
}

bool solveSudoku(vector < vector < char >> & board) {
  for (int i = 0; i < board.size(); i++) {
    for (int j = 0; j < board[0].size(); j++) {
      if (board[i][j] == '.') {
        for (char c = '1'; c <= '9'; c++) {
          if (isValid(board, i, j, c)) {
            board[i][j] = c;

            if (solveSudoku(board))
              return true;
            else
              board[i][j] = '.';
          }
        }

        return false;
      }
    }
  }
  return true;
}
int main() {
    vector<vector<char>>board{
        {'9', '5', '7', '.', '1', '3', '.', '8', '4'},
        {'4', '8', '3', '.', '5', '7', '1', '.', '6'},
        {'.', '1', '2', '.', '4', '9', '5', '3', '7'},
        {'1', '7', '.', '3', '.', '4', '9', '.', '2'},
        {'5', '.', '4', '9', '7', '.', '3', '6', '.'},
        {'3', '.', '9', '5', '.', '8', '7', '.', '1'},
        {'8', '4', '5', '7', '9', '.', '6', '1', '3'},
        {'.', '9', '1', '.', '3', '6', '.', '7', '5'},
        {'7', '.', '6', '1', '8', '5', '4', '.', '9'}
    };
   
    solveSudoku(board);
        	
    for(int i= 0; i< 9; i++){
        for(int j= 0; j< 9; j++)
            cout<<board[i][j]<<" ";
            cout<<"\n";
    }
    return 0;
}
