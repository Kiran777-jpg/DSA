leetcode: https://leetcode.com/problems/powx-n/description/
geeksforgeeks: https://practice.geeksforgeeks.org/problems/power-of-numbers-1587115620/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=power-of-numbers


**************************************************

class Solution {
public:
    double myPowUtil(double x, long long nn)
    {
        double temp;
        if(nn==0) return 1;
        temp = myPowUtil(x, nn/2);
        if(nn%2)
            return x*temp*temp;
        else
            return temp*temp;
    }
    double myPow(double x, int n) {
        if(x==0) return x;
        long long nn = n;
        if(nn<0) nn *= -1;
        double ans = myPowUtil(x, nn);  
        cout<<ans<<endl;    
        if(n<0)  ans = (double)1.0/(double)ans;
        return ans;
    }
};

*************************************8

class Solution {
public:
    double myPowUtil(double x, long long nn)
    {
        if(nn==0) return 1;
        if(nn%2)
            return x*myPowUtil(x, nn-1);
        else
            return myPowUtil(x*x, nn/2);
    }
    double myPow(double x, int n) {
        if(x==0) return x;
        long long nn = n;
        if(nn<0) nn *= -1;
        double ans = myPowUtil(x, nn);      
        if(n<0)  ans = (double)1.0/(double)ans;
        return ans;
    }
};


***************************************************

class Solution {
public:
    double myPow(double x, int n) {
        double ans = 1.0;
        long long nn = n;
        if (nn < 0) nn = -1 * nn;
        while (nn) {
            if (nn % 2) {
            ans = ans * x;
            nn = nn - 1;
            } else {
            x = x * x;
            nn = nn / 2;
            }
        }
        if (n < 0) ans = (double)(1.0) / (double)(ans);
        return ans;
    }
};

****************************************************

class Solution {
public:
        double myPow(double x, int n) {
        double ans = 1.0;    
        long long nn=n;
        if(nn<0) nn *= -1;
        while(nn)
        {
            if(nn%2==0)
            {
                x=x*x;
                nn=nn/2;
            }
            else
            {
                nn=nn-1;
                ans = ans*x;
            }
        }
        if(n<0) ans = (double)(1.0) / (double)(ans);
        return ans;
    }
};

*******************************************************

class Solution {
public:
    double myPow(double x, int n) {
        double ans = 1.0;
        long long nn = n;
        if (nn < 0) nn = -1 * nn;
        while (nn) {
            if (nn % 2) {
            ans = ans * x;
            nn = nn - 1;
            } else {
            x = x * x;
            nn = nn / 2;
            }
        }
        if (n < 0) ans = (double)(1.0) / (double)(ans);
        return ans;
    }
};
