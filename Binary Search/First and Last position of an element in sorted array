leetcode: https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/description/
geeksforgeeks: https://practice.geeksforgeeks.org/problems/first-and-last-occurrences-of-x3116/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=first-and-last-occurrences-of-x


************************************************************
 int firstSearch(vector<int>& arr, int n, int start, int end, int x)
    {
        while(start<=end)
        {
            int mid = start+(end-start)/2;
            if((mid==0 || arr[mid-1]<x)&&arr[mid]==x)
                return mid;
            else if(arr[mid]<x)
                start=mid+1;
            else
                end=mid-1;
        }
        return -1;
    }
    
    int lastSearch(vector<int>& arr, int n, int start, int end, int x)
    {
        while(start<=end)
        {
            int mid = start+(end-start)/2;
            if((mid==n-1 || arr[mid+1]>x)&&arr[mid]==x)
                return mid;
            else if(arr[mid]>x)
                end=mid-1;
            else
                start=mid+1;
        }
        return -1;
    }
    
    vector<int> searchRange(vector<int>& nums, int target) {
        int n = nums.size();
        return {firstSearch(nums, n, 0, n-1, target),lastSearch(nums, n, 0, n-1, target)};
    }
    
    
    ***************************************************************
    
     int firstOccurrence(vector<int> &nums, int target)
    {
        int start=0, end=nums.size()-1;
        if(nums.size()==0) return -1;
        if(target == nums[0]) return 0;

        while(start<=end)
        {
            int mid = start+(end-start)/2;
            if(mid > 0 && nums[mid]==target && nums[mid-1]<target)
                return mid;
            if(nums[mid]<target)
                start=mid+1;
            else
                end=mid-1;
        }
        return -1;
    }
    int lastOccurrence(vector<int> &nums, int target)
    {
        int n = nums.size();
        if(n==0) return -1;
        int start=0, end=nums.size()-1;
        if(target == nums[end]) return end;

        while(start<=end)
        {
            int mid=start+(end-start)/2;
            if(mid < n-1 && nums[mid]==target && nums[mid+1]>target)
                return mid;
            if(nums[mid]>target)
                end=mid-1;
            else    
                start=mid+1;
        }
        return -1;
    }
    vector<int> searchRange(vector<int>& nums, int target) {
        return {firstOccurrence(nums,target), lastOccurrence(nums, target)};
    }
    
    
