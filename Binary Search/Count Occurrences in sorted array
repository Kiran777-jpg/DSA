geeksforgeeks: https://practice.geeksforgeeks.org/problems/number-of-occurrence2259/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=number-of-occurrence


***************************************************************
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int binarySearchfirstOcc(vector<int> &arr, int x)
{
    int start=0, end=arr.size()-1;
    
    while(start<=end)
    {
        int mid = start+(end-start)/2;
        cout<<"start: "<<start<<" end: "<<end<<" mid: "<<mid<<endl;
        if((mid==0 || arr[mid-1]<x) && arr[mid]==x)
            return mid;
        if(arr[mid]<x)
            start=mid+1;
        else
            end=mid-1;
    }
    return -1;
}

int count(vector<int> &arr, int x)
{
    int idx = binarySearchfirstOcc(arr, x);
    cout<<idx<<endl;
    if(idx == -1)
        return 0;
    
    int i=0;
    while(arr[idx] == x) 
    {
        idx++; 
        i++;
    }
    return i;
}

int main()
{
    // vector<int> arr = {1, 1, 2, 2, 2, 2, 3};
    vector<int> arr = {8, 9, 9, 11, 12, 13, 14, 14, 15, 15, 16, 17, 18, 19, 19, 21, 22, 24, 25, 27, 28, 30, 31, 31, 32, 32, 33};
    int x=9;
    cout<<count(arr, x)<<endl;
}


************************************************************************************

int count(int arr[], int n, int x) {
	    // code here
	    int lb = lower_bound(arr, arr+n, x)-arr;
	    int ub = upper_bound(arr, arr+n, x)-arr-1;
	    return ub-lb+1;
	}
