leetcode: https://leetcode.com/problems/single-element-in-a-sorted-array/description/
geeksforgeeks: https://practice.geeksforgeeks.org/problems/find-the-element-that-appears-once-in-sorted-array0624/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=find-the-element-that-appears-once-in-sorted-array


**************************************************
class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int n=nums.size();
        int start=0, end=nums.size()-1;
        while(start<=end)
        {
            if(start==end)
                break;
            int mid=start+(end-start)/2;
            if(mid%2==0)
            {
                if(nums[mid]==nums[mid+1])
                    start=mid+1;
                else
                    end=mid;
            }
            else
            {
                if(nums[mid]==nums[mid-1])
                    start=mid+1;
                else    end=mid;
            }
        }
        return nums[start];
    }
};
************************************************
class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int n=nums.size();
        int start=0, end=nums.size()-1;
        while(start<=end)
        {
            int mid=start+(end-start)/2;
            if(mid%2==0)
            {
                if(mid<n-1 && nums[mid]==nums[mid+1])
                    start=mid+1;
                else
                    end=mid-1;
            }
            else
            {
                if(mid>0 && nums[mid]==nums[mid-1])
                    start=mid+1;
                else    end=mid-1;
            }
        }
        return nums[start];
    }
};
*****************************************************
#define nums arr
class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int n = arr.size();
        int start=0, end=n-1;
        while(start<=end)
        {
            if(start==end)
                return arr[start];
            int mid = start+(end-start)/2;
            if(mid%2 == 0)
            {
                if(arr[mid]==arr[mid+1])
                    start=mid+2;
                else
                    end=mid;
            }
            else
            {
                if(arr[mid]==arr[mid-1])
                    start=mid+1;
                else
                    end=mid;
            }
        }
        return arr[start];
    }
};
