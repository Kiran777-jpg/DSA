leetcode: https://leetcode.com/problems/rotate-list/description/
geeksforgeeks: https://practice.geeksforgeeks.org/problems/rotate-a-linked-list/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=rotate-a-linked-list


****************************************************************
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        if(!head || !head->next || k==0) return head;
        ListNode* tail = head;
        int len=1;
        while(tail->next)
        {
            len++;
            tail=tail->next;
        }
        tail->next = head;
        k=k%len;
        k=len-k;
        while(k--)
            tail=tail->next;
        head=tail->next;
        tail->next=NULL;
        return head;
    }
};


********************************************************************

Tow pointer Approach (slow & fast)

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        if(head==NULL) return head;
        ListNode *slow=head, *fast=head;
        int count=0;
        while(slow!=NULL)
        {
            count++;
            slow=slow->next;
        }
        slow=head;
        for(int i=0;i<k%count;i++)
            fast=fast->next;
        while(fast && fast->next)
        {
            slow=slow->next;
            fast=fast->next;
        }
        fast->next=head;
        head=slow->next;
        slow->next=NULL;
        return head;
    }
};

