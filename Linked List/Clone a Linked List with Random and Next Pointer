leetcode: https://leetcode.com/problems/copy-list-with-random-pointer/description/
geeksforgeeks: https://practice.geeksforgeeks.org/problems/clone-a-linked-list-with-next-and-random-pointer/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=clone-a-linked-list-with-next-and-random-pointer



*********************************************************
Tc: o(n)+o(n)+o(n) = o(n),  Sc: o(1)

/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    Node* copyRandomList(Node* head) {
        if(!head) return head;
        Node* temp=head;
        while(temp)
        {
            Node* newnode = new Node(temp->val);
            newnode->next=temp->next;
            temp->next=newnode;
            temp=temp->next->next;
        }
        temp=head;
        while(temp)
        {
            if(temp->random)
                temp->next->random = temp->random->next;
            temp=temp->next->next;
        }
        temp=head;
        Node* fast=temp->next;
        Node* res=fast;
        while(fast->next)     // while(temp)
        {
            temp->next=fast->next;
            temp=temp->next;
            
            fast->next=temp->next;   //if(temp)
            fast=fast->next;
        }
        temp->next=NULL;      //not required if we write the commented code
        return res;
    }
};


******************************************************************

Tc: o(n)+o(n) = o(n),  Sc: o(n)


/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    Node* copyRandomList(Node* head) {
        unordered_map<Node*, Node*> hashmap;
        Node* temp=head;
        while(temp)
        {
            Node* newnode = new Node(temp->val);
            hashmap[temp]=newnode;
            temp=temp->next;
        }
        temp=head;
        while(temp)
        {
            Node* node = hashmap[temp];
            node->next = (temp->next==NULL)?NULL:hashmap[temp->next];
            node->random = (temp->random==NULL)?NULL:hashmap[temp->random];
            temp=temp->next;
        }
        return hashmap[head];
    }
};
