leetcode: https://leetcode.com/problems/odd-even-linked-list/
geeksforgeeks: https://practice.geeksforgeeks.org/problems/segregate-even-and-odd-nodes-in-a-linked-list5035/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=segregate-even-and-odd-nodes-in-a-linked-list


*************************************************
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        if(!head || !head->next) return head;
        ListNode *temp1 = head, *temp2 = head->next;
        ListNode *even=temp2;
        while(temp1 && temp2)
        {
            if(temp2->next)
            {
                temp1->next = temp2->next;
                temp1 = temp1->next;

                if(temp1->next)
                {
                    temp2->next = temp1->next;
                    temp2 = temp2->next;
                }
                else   
                    temp2->next = NULL, temp2=NULL;
            }
            else  
                temp2->next = NULL, temp2=NULL;
        }
        temp1->next=even;
        return head;
    }
};

*************************************************************
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        if(!head || !head->next) return head;
        ListNode *temp1 = head, *temp2 = head->next;
        ListNode *odd=temp1, *even=temp2;
        while(temp1 && temp2)
        {
            if(temp2->next)
            {
                temp1->next = temp2->next;
                temp1 = temp1->next;

                if(temp1->next)
                {
                    temp2->next = temp1->next;
                    temp2 = temp2->next;
                }
                else   
                    temp2->next = NULL, temp2=NULL;
            }
            else  
                temp2->next = NULL, temp2=NULL;
        }
        temp1->next=even;
        return odd;
    }
};

*********************************************************************
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        if(head==NULL || head->next==NULL) return head;
        ListNode *odd = head, *even=head->next;
        ListNode *tempOdd, *tempEven = even;
        int i=1;
        head = head->next->next;
        while(head!=NULL)
        {
            if(i%2)
            {
                odd->next=head;
                odd=odd->next;
            }
            else
            {
                even->next=head;
                even=even->next;
            }
            head=head->next;
            i++;
        }
        even->next = NULL;
        odd->next = tempEven;
        return tempOdd;
    }
};

