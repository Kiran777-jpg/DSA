#include <iostream>
using namespace std;

class Node
{
    public:
        int data;
        Node* next;
        Node* prev;
        
        Node(int data)
        {
            this->data = data;
            prev=next=NULL;
        }
};

class List
{
    public:
        Node* head;
        Node* tail;
        
        List()
        {
            head=tail=NULL;
        }
        
        void push_back(int data)
        {
            Node* newnode = new Node(data);
            if(head==NULL)
                head=newnode;
            else
            {
                tail->next=newnode;
                newnode->prev=tail;
            }
            tail=newnode;
        }
        
        void print()
        {
            Node* temp=head;
            while(temp!=NULL)
            {
                cout<<temp->data<<" ";
                temp=temp->next;
            }
            cout<<endl;
        }
        
        void reverse()
        {
            Node* temp=tail;
            while(temp!=NULL)
            {
                cout<<temp->data<<" ";
                temp=temp->prev;
            }
            cout<<endl;
        }
        
        void removeDuplicates()
        {
            Node* temp=head;
            Node* curr=head->next;
            while(curr->next)
            {
                if(temp->data != curr->data)
                {
                    temp->next=curr;
                    curr->prev=temp;
                    temp=temp->next;
                }
                curr=curr->next;
            }
            
            if(temp->data != curr->data)
            {
                temp->next=curr;
                curr->prev=temp;
                temp=temp->next;
            }
            else
            {
                temp->next=NULL;
                curr->prev=NULL;
                tail=temp;
            }
            
        }
};

int main()
{
    List l1;
    l1.push_back(4);
    l1.push_back(4);
    l1.push_back(4);
    l1.push_back(6);
    l1.push_back(8);
    l1.push_back(8);
    l1.push_back(10);
    l1.push_back(12);
    l1.push_back(12);
    l1.print();
    l1.reverse();
    l1.removeDuplicates();
    l1.print();
    l1.reverse();
}
